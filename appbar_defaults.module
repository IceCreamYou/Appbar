<?php
// $Id$

/**
 * @file
 *   This module is an example of a way to use the Appbar system to generate
 *   alerts when certain events occur.
 */

/**
 * Implementation of hook_user().
 */
function appbar_defaults_user($op, &$edit, &$account, $category = NULL) {
  global $user;
  if ($op == 'delete') {
    //If the administrator deleted the user, there will be a system message saying so, so we don't need an appbar alert.
    if ($user->uid != 1) {
      appbar_set_message(t('User %deleted was deleted by %deleter', array('%deleted' => theme('username', $account), '%deleter' => theme('username', $user))), 'user-delete-1', 1);
    }
  }
  elseif ($op == 'insert') {
    appbar_set_message(t('User %user has registered on @site.', array('%user' => theme('username', $account), '@site' => variable_get('site_name', 'Drupal'))), 'user-insert-1', 1);
    appbar_set_message(t('Welcome to @site, @user!', array('@site' => variable_get('site_name', 'Drupal'), '@user' => $account->name)), 'user-insert', $account->uid);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function appbar_defaults_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  if ($op == 'delete') {
    appbar_set_message(t('!user deleted your post %node.', array('%node' => $node->title, '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'node-delete', $node->uid);
    appbar_set_message(t('!user deleted the node %node.', array('%node' => $node->title, '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'node-delete-1', 1);
  }
  elseif ($op == 'insert') {
    appbar_set_message(t('!user added the node !node.', array('!node' => l($node->title, 'node/'. $node->nid), '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'node-insert-1', 1);
  }
  elseif ($op == 'update') {
    appbar_set_message(t('!user updated your post !node.', array('!node' => l($node->title, 'node/'. $node->nid), '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'node-update', $node->uid);
    appbar_set_message(t('!user updated the node !node.', array('!node' => l($node->title, 'node/'. $node->nid), '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'node-update-1', 1);
  }
}

/**
 * Implementation of hook_comment().
 */
function appbar_defaults_comment(&$comment, $op) {
  global $user;
  $c = (object) $comment; //Why? Because I like it like that.
  $node = db_fetch_object(db_query("SELECT n.uid, n.nid, n.title FROM {comments} c INNER JOIN {node} n ON c.nid = n.nid WHERE c.cid = %d", $c->cid));
  //The -other operations could potentially be slow with lots of commenters.
  if ($op == 'delete') {
    appbar_set_message(t('!user deleted your comment %comment.', array('%comment' => $c->subject, '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'comment-delete', $c->uid);
    appbar_set_message(t('!user deleted the comment %comment on your node !title.', array('%comment' => $c->subject, '!user' => theme('username', user_load(array('uid' => $user->uid))), '!title' => l($node->title, 'node/'. $node->nid))), 'comment-delete-node-author', $node->uid);
    appbar_set_message(t('!user deleted the comment %comment.', array('%comment' => $c->subject, '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'comment-delete-1', 1);
    $result = db_query("SELECT DISTINCT(uid) FROM {comments} WHERE uid <> %d AND nid = %d", $c->uid, $c->nid);
    while ($account = db_fetch_object($result)) {
      appbar_set_message(t('!user deleted the comment %comment.', array('%comment' => $c->subject, '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'comment-delete-others', $account->uid);
    }
  }
  elseif ($op == 'insert') {
    appbar_set_message(t('!user added the comment !comment.', array('!comment' => l($c->subject, 'node/'. $c->nid, array('fragment' => 'comment-'. $c->cid)), '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'comment-insert-1', 1);
    appbar_set_message(t('!user added the comment !comment on your node !title.', array('!comment' => l($c->subject, 'node/'. $c->nid, array('fragment' => 'comment-'. $c->cid)), '!user' => theme('username', user_load(array('uid' => $user->uid))), '!title' => l($node->title, 'node/'. $node->nid))), 'comment-insert-node-author', $node->uid);
    $result = db_query("SELECT DISTINCT(uid) FROM {comments} WHERE uid <> %d AND nid = %d", $c->uid, $c->nid);
    while ($account = db_fetch_object($result)) {
      appbar_set_message(t('!user added the comment !comment.', array('!comment' => l($c->subject, 'node/'. $c->nid, array('fragment' => 'comment-'. $c->cid)), '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'comment-insert-others', $account->uid);
    }
  }
  elseif ($op == 'update') {
    appbar_set_message(t('!user updated your comment !comment.', array('!comment' => l($c->subject, 'node/'. $c->nid, array('fragment' => 'comment-'. $c->cid)), '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'comment-update', $c->uid);
    appbar_set_message(t('!user updated the comment !comment on your node !title.', array('!comment' => l($c->subject, 'node/'. $c->nid, array('fragment' => 'comment-'. $c->cid)), '!user' => theme('username', user_load(array('uid' => $user->uid))), '!title' => l($node->title, 'node/'. $node->nid))), 'comment-update-node-author', $node->uid);
    appbar_set_message(t('!user updated the comment !comment.', array('!comment' => l($c->subject, 'node/'. $c->nid, array('fragment' => 'comment-'. $c->cid)), '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'comment-update-1', 1);
    $result = db_query("SELECT DISTINCT(uid) FROM {comments} WHERE uid <> %d AND nid = %d", $c->uid, $c->nid);
    while ($account = db_fetch_object($result)) {
      appbar_set_message(t('!user updated the comment !comment.', array('!comment' => l($c->subject, 'node/'. $c->nid, array('fragment' => 'comment-'. $c->cid)), '!user' => theme('username', user_load(array('uid' => $user->uid))))), 'comment-update-others', $account->uid);
    }
  }
}

/**
 * Implementation of hook_appbar_id().
 */
function appbar_defaults_appbar_id() {
  //It doesn't make sense to include 'status' in this array because we have an explicit setting for it.
  $a = array(
    'node-delete' => t('Node deletion (alerts author)'),
    'node-delete-1' => t('Node deletion (alerts User 1)'),
    'node-insert-1' => t('Node insertion (alerts User 1)'),
    'node-update' => t('Node updating (alerts author)'),
    'node-update-1' => t('Node updating (alerts User 1)'),
    'user-delete-1' => t('User deletion (alerts User 1)'),
    'user-insert' => t('User insertion (welcomes new user)'),
    'user-insert-1' => t('User insertion (alerts User 1)'),
  );
  if (module_exists('comment')) {
    $b = array(
      'comment-delete' => t('Comment deletion (alerts author)'),
      'comment-delete-1' => t('Comment deletion (alerts User 1)'),
      'comment-delete-node-author' => t('Comment deletion (alerts node author)'),
      'comment-delete-others' => t('Comment deletion (alerts other commenters in thread)'),
      'comment-insert-1' => t('Comment insertion (alerts User 1)'),
      'comment-insert-node-author' => t('Comment insertion (alerts node author)'),
      'comment-insert-others' => t('Comment insertion (alerts other commenters in thread)'),
      'comment-update' => t('Comment updating (alerts author)'),
      'comment-update-1' => t('Comment updating (alerts User 1)'),
      'comment-update-node-author' => t('Comment updating (alerts node author)'),
      'comment-update-others' => t('Comment updating (alerts other commenters in thread)'),
    );
    $a = array_merge($b, $a);
  }
  return $a;
}